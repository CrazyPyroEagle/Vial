<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description0000" xml:space="preserve">
    <value>Dependency or mixin target could not be found in mscorlib or any of the required assemblies.</value>
  </data>
  <data name="Description0001" xml:space="preserve">
    <value>Certain attributes cannot be used together.</value>
  </data>
  <data name="Description0002" xml:space="preserve">
    <value>Declaring type of mixin member must be a mixin. Declaring type of dependency member must be a dependency or a mixin.</value>
  </data>
  <data name="Description0003" xml:space="preserve">
    <value>Module with 'PatchAttribute' is inside an assembly with an 'InternalsVisibleToAttribute'. Sharing internal mixins may cause issues and is not recommended.</value>
  </data>
  <data name="Description0004" xml:space="preserve">
    <value>Dependency type should not inherit from anything other than 'object' to avoid missing member errors. Mixin type can inherit from interfaces, but not other classes.</value>
  </data>
  <data name="Description0005" xml:space="preserve">
    <value>Assembly could not be found in the list of references. For the 'PatchAttribute' argument, use 'null' instead if this is intentional.</value>
  </data>
  <data name="Description0006" xml:space="preserve">
    <value>Cannot call method with a 'BaseDependencyAttribute' from a method with no 'MixinAttribute'.</value>
  </data>
  <data name="Description0007" xml:space="preserve">
    <value>Members with 'MixinAttribute', 'DependencyAttribute', or 'BaseDependencyAttribute' cannot be accessible outside the assembly.</value>
  </data>
  <data name="Description0008" xml:space="preserve">
    <value>Interface implementation does not have an 'InjectAttribute'.</value>
  </data>
  <data name="Description0009" xml:space="preserve">
    <value>Reference to a member that is neither injected, nor a dependency, nor a mixin.</value>
  </data>
  <data name="Description0010" xml:space="preserve">
    <value>Direct references to types inside the patched assembly or one of the dependencies are not recommended. Types with 'DependencyAttribute' should be used instead.</value>
  </data>
  <data name="Description0011" xml:space="preserve">
    <value>Declaring module of injected, mixin, or dependency member must have a 'PatchAttribute'.</value>
  </data>
  <data name="Description0012" xml:space="preserve">
    <value>Base dependency's argument types must be identical to the calling method's.</value>
  </data>
  <data name="Description0013" xml:space="preserve">
    <value>Interface implementation cannot have a 'NameAttribute', as renaming the interface member is impossible.</value>
  </data>
  <data name="Description0014" xml:space="preserve">
    <value>Interface implementations should be explicit to avoid method name collisions.</value>
  </data>
  <data name="MessageFormat0000" xml:space="preserve">
    <value>Dependency or mixin target '{0}' could not be found</value>
  </data>
  <data name="MessageFormat0001" xml:space="preserve">
    <value>'{0}' has both '{1}' and '{2}'</value>
  </data>
  <data name="MessageFormat0002" xml:space="preserve">
    <value>Declaring type of '{0}' does not have a 'MixinAttribute' or a 'DependencyAttribute'</value>
  </data>
  <data name="MessageFormat0003" xml:space="preserve">
    <value>Assembly contains a module with a 'PatchAttribute'</value>
  </data>
  <data name="MessageFormat0004" xml:space="preserve">
    <value>Type '{0}' has a 'DependencyAttribute' or a 'MixinAttribute' but does not inherit from 'System.Object', 'System.Enum', 'System.Delegate', or 'System.MulticastDelegate'</value>
  </data>
  <data name="MessageFormat0005" xml:space="preserve">
    <value>Assembly '{0}' could not be found</value>
  </data>
  <data name="MessageFormat0006" xml:space="preserve">
    <value>Method '{0}' does not have a 'MixinAttribute' yet it attempts to call a method with a 'BaseDependencyAttribute'</value>
  </data>
  <data name="MessageFormat0007" xml:space="preserve">
    <value>Member '{0}' is not declared internal</value>
  </data>
  <data name="MessageFormat0008" xml:space="preserve">
    <value>Interface implementation '{0}' does not have an 'InjectAttribute'</value>
  </data>
  <data name="MessageFormat0009" xml:space="preserve">
    <value>Reference to unavailable member '{0}'</value>
  </data>
  <data name="MessageFormat0010" xml:space="preserve">
    <value>Direct reference to '{0}' from patched or dependency assembly '{1}'</value>
  </data>
  <data name="MessageFormat0011" xml:space="preserve">
    <value>Declaring module of type '{0}' is not a patch</value>
  </data>
  <data name="MessageFormat0012" xml:space="preserve">
    <value>Base dependency argument mismatch in '{0}'</value>
  </data>
  <data name="MessageFormat0013" xml:space="preserve">
    <value>Interface implementation '{0}' cannot have a 'NameAttribute'</value>
  </data>
  <data name="MessageFormat0014" xml:space="preserve">
    <value>Interface implementation '{0}' from interface '{1}' is not explicitly defined</value>
  </data>
  <data name="Title0000" xml:space="preserve">
    <value>Dependency or mixin target not found</value>
  </data>
  <data name="Title0001" xml:space="preserve">
    <value>Incompatible attributes</value>
  </data>
  <data name="Title0002" xml:space="preserve">
    <value>Declaring type is not a mixin or dependency</value>
  </data>
  <data name="Title0003" xml:space="preserve">
    <value>Patched module's internal types are shared</value>
  </data>
  <data name="Title0004" xml:space="preserve">
    <value>Dependency or mixin type inherits from a type</value>
  </data>
  <data name="Title0005" xml:space="preserve">
    <value>Assembly not found</value>
  </data>
  <data name="Title0006" xml:space="preserve">
    <value>Cannot call original method</value>
  </data>
  <data name="Title0007" xml:space="preserve">
    <value>Member is not declared internal</value>
  </data>
  <data name="Title0008" xml:space="preserve">
    <value>Interface implementation must be injected</value>
  </data>
  <data name="Title0009" xml:space="preserve">
    <value>Reference to unavailable member</value>
  </data>
  <data name="Title0010" xml:space="preserve">
    <value>Direct reference to a type inside the patched assembly or one of the dependencies</value>
  </data>
  <data name="Title0011" xml:space="preserve">
    <value>Declaring module is not a patch</value>
  </data>
  <data name="Title0012" xml:space="preserve">
    <value>Base dependency argument mismatch</value>
  </data>
  <data name="Title0013" xml:space="preserve">
    <value>Interface implementation cannot have a 'NameAttribute'</value>
  </data>
  <data name="Title0014" xml:space="preserve">
    <value>Interface implementations should be explicit</value>
  </data>
</root>